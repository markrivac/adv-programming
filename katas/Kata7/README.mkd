# Kata 7 - Batman Game

## Goal

Batman will look for the hostages on a given building by jumping from one window to another using his grapnel gun. Batman's goal is to jump to the window where the hostages are located in order to disarm the bombs. Unfortunately he has a limited number of jumps before the bombs go off...

## Rules

Before each jump, the heat-signature device will provide Batman with the direction of the bombs based on Batman current position: 
U (Up)
UR (Up-Right)
R (Right)
DR (Down-Right)
D (Down)
DL (Down-Left)
L (Left)
UL (Up-Left)

## Mission

Your mission is to program the device so that it indicates the location of the next window Batman should jump to in order to reach the bombs' room as soon as possible.

Buildings are represented as a rectangular array of windows, the window in the top left corner of the building is at index (0,0).

### Note

For some tests, the bombs' location may change from one execution to the other: the goal is to help you find the best algorithm in all cases.
The tests provided are similar to the validation tests used to compute the final score but remain different.

## Input 

The program must first read the initialization data from standard input. Then, within an infinite loop, read the device data from the standard input and provide to the standard output the next movement instruction.

### Initialization input

Line 1 : 2 integers W H. The (W, H) couple represents the width and height of the building as a number of windows.

Line 2 : 1 integer N, which represents the number of jumps Batman can make before the bombs go off.

Line 3 : 2 integers X0 Y0, representing the starting position of Batman.

### Input for one game turn

The direction indicating where the bomb is.

### Output for one game turn

A single line with 2 integers X Y separated by a space character. (X, Y) represents the location of the next window Batman should jump to. X represents the index along the horizontal axis, Y represents the index along the vertical axis. (0,0) is located in the top-left corner of the building.

### Constraints 

1 ≤ W ≤ 10000
1 ≤ H ≤ 10000
2 ≤ N ≤ 100
0 ≤ X, X0 < W
0 ≤ Y, Y0 < H
Response time per turn ≤ 150ms
Response time per turn ≤ 150ms

## Solution 

The solution for this problem can be found in the file Player.java

What I did here was the following:

I use four more variables than used at the begining of the problem to delimit the top up, top left, top right and top down.
With this I am reducing the "board" each time Batman is moved.

I created four methods that move batman up, down, left or right.
Up: 
If batman needs to move up means that the actual position is the low limit, then it will move to the point between the actual Y and the upper limit.

Down:
If batman needs to move down means that the actual position is the up limit, then it will move to the point between the actual Y and the lower limit.

Left:
If batman needs to move left means that the actual position is the right limit, then it will move to the point between the actual X and the left limit.

Right:
If batman needs to move up means that the actual position is the left limit, then it will move to the point between the actual X and the right limit.

It is possible that the operation that calculates the next position be lower that one of the limits. In that case, Batman will only move one spot in the desired direction.
To move the program receives a input for moving in any direction needed.

This solution passed 5/7 tests.